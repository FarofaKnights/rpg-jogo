//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""General"",
            ""id"": ""f21ec665-1934-4e87-99b8-daf5eb9bab9e"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Player"",
            ""id"": ""0cc106de-0f1a-49f9-9045-94f8c838007d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eb2901c6-ce60-4ca1-93b7-fde176b121d5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f3fd3a2b-4442-407a-8d03-81cd67fedb26"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lock On Targert Left"",
                    ""type"": ""Button"",
                    ""id"": ""2f1b95da-2ebc-4f08-8b1c-95fb061326f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lock on Targert Right"",
                    ""type"": ""Button"",
                    ""id"": ""2edc740b-5dfa-497a-b2df-b45c60ff58bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""03c331d9-849c-4b10-b2b4-105ea62f2d7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""lockOnInput"",
                    ""type"": ""Button"",
                    ""id"": ""89a4a94f-e5cb-4edd-9d81-e68dc7c33650"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""4718377c-6600-4fe2-9fc2-8641b8dabbf3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CheatMode"",
                    ""type"": ""Button"",
                    ""id"": ""973af51f-0cae-409e-a67f-d8c186d6cbb1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""ee0aea72-8438-46a0-a9e9-d9e73e8f740f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Itens"",
                    ""type"": ""Button"",
                    ""id"": ""00be8a9c-11ee-427d-9bc4-2733b9a624f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""93d1b772-3eab-495b-bb1b-d1bd7d0c07f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Arm"",
                    ""type"": ""Button"",
                    ""id"": ""7593d811-a08e-4813-880b-231a3427c47b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8afd30b3-236b-4f7a-984e-41f065310bed"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ce8260be-1c90-4988-8d11-edff37d50ed5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""97287144-15d0-428e-a988-37169a57be95"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e6d77a50-81d1-4dff-862b-eef4de68f374"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9c8cc03e-85cf-4d6f-b469-7cff95e3bb98"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6b32cfd5-9956-4215-bd2c-d02fa60306af"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6974b800-51ce-4c69-a5af-df62be425056"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""124d3eaf-8b39-4de7-b036-ee94de10880d"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock On Targert Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""327fe236-96b3-4b37-987c-87fb168cb891"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock on Targert Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1cc6ee1f-08bf-4699-8659-cf362505de2f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca80ffe2-1f90-4998-a844-f68497896cb5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3736afbc-e848-4975-8bf7-84768578a46a"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""lockOnInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfe89eed-0cc6-462b-b2ad-04ba8f7c4c5f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d8883f0-c091-4423-bb32-f421e95aea12"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CheatMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4113ddb4-d43c-40ef-8c5a-09a8caacb5e0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b0035a9-ac90-40d8-9426-f907b57faa92"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Itens"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32fbb630-22a7-4015-a35e-bd91564c9673"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6129458b-8510-4e6a-bf02-e3717240bb34"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""99439aae-aece-4789-bc4a-c3ee3c90c7fb"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""5c5c4f34-3cab-4c49-972b-812997535b5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""8aeeac94-12c2-48ec-bfe6-a602d36ec131"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""89634c84-4dc1-45bf-90d4-1393830e38f4"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90ff6885-1bb1-4506-8653-1859d53bac9b"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df0a646e-2c4b-4f2d-b5e7-fe1d8b166b01"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Loja"",
            ""id"": ""c8031ca2-ac8e-42e6-a692-a1c6b2bc7bff"",
            ""actions"": [
                {
                    ""name"": ""Sair"",
                    ""type"": ""Button"",
                    ""id"": ""8d1725de-cbad-4660-8eb1-dda8e5f83696"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CheatMode"",
                    ""type"": ""Button"",
                    ""id"": ""34a5c1ea-a6da-4342-8a75-0ce0f1166231"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""0858a4de-f3da-48cc-8d57-a09d356ed85d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Itens"",
                    ""type"": ""Button"",
                    ""id"": ""8e0cde00-adff-480a-808d-38f93ba5c210"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""94434fee-ba67-4a8e-993c-84cf5ff77347"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sair"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b616b19-2625-46cc-b734-955acc70ef74"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sair"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83b5f360-677b-4f3a-84a4-e802a5f97645"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CheatMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a908c47-291f-4628-9216-6d550470a625"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Itens"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cheat"",
            ""id"": ""78b60b34-e57e-424d-97ad-5b38057cc6a5"",
            ""actions"": [
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""1f4eb739-a360-475c-8eaf-b009610b1e5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""715c5c2f-ef6f-4070-ac4a-8f5258136f45"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialog"",
            ""id"": ""d689eaa4-c732-4b06-8306-f72a3d3de31b"",
            ""actions"": [
                {
                    ""name"": ""Itens"",
                    ""type"": ""Button"",
                    ""id"": ""9221a2b9-f826-4547-be9c-a94b3dbdb851"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""2cb1c82f-4efc-4f8b-94be-5490406fac05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""6a66d9dd-3e8b-48a8-8a85-ab40bd409e24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""b5286f85-c44e-41c3-8fea-85b28fe935c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""8c99d05c-0432-40cd-bf5e-5c17ee4957f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4355bfa7-5ef6-4601-a211-9bb33cbb336d"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Itens"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54636ed1-b02e-4abd-9b70-87d62727478c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7ba25a7-b3b8-4459-9373-ad8f8114a5c1"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30ada00a-5d12-4d5a-bf82-67af8777e373"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6df0dbe3-daa4-4c1f-b0f4-2950fa17a4ee"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9c29de1-dd67-4e34-8f99-18fd90ed6235"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8718b8e-7db7-47ce-9635-858b44a0556b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Camera = m_Player.FindAction("Camera", throwIfNotFound: true);
        m_Player_LockOnTargertLeft = m_Player.FindAction("Lock On Targert Left", throwIfNotFound: true);
        m_Player_LockonTargertRight = m_Player.FindAction("Lock on Targert Right", throwIfNotFound: true);
        m_Player_Roll = m_Player.FindAction("Roll", throwIfNotFound: true);
        m_Player_lockOnInput = m_Player.FindAction("lockOnInput", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_CheatMode = m_Player.FindAction("CheatMode", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        m_Player_Itens = m_Player.FindAction("Itens", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        m_Player_Arm = m_Player.FindAction("Arm", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Interact = m_UI.FindAction("Interact", throwIfNotFound: true);
        m_UI_Exit = m_UI.FindAction("Exit", throwIfNotFound: true);
        // Loja
        m_Loja = asset.FindActionMap("Loja", throwIfNotFound: true);
        m_Loja_Sair = m_Loja.FindAction("Sair", throwIfNotFound: true);
        m_Loja_CheatMode = m_Loja.FindAction("CheatMode", throwIfNotFound: true);
        m_Loja_Pause = m_Loja.FindAction("Pause", throwIfNotFound: true);
        m_Loja_Itens = m_Loja.FindAction("Itens", throwIfNotFound: true);
        // Cheat
        m_Cheat = asset.FindActionMap("Cheat", throwIfNotFound: true);
        m_Cheat_Exit = m_Cheat.FindAction("Exit", throwIfNotFound: true);
        // Dialog
        m_Dialog = asset.FindActionMap("Dialog", throwIfNotFound: true);
        m_Dialog_Itens = m_Dialog.FindAction("Itens", throwIfNotFound: true);
        m_Dialog_Pause = m_Dialog.FindAction("Pause", throwIfNotFound: true);
        m_Dialog_Interact = m_Dialog.FindAction("Interact", throwIfNotFound: true);
        m_Dialog_Up = m_Dialog.FindAction("Up", throwIfNotFound: true);
        m_Dialog_Down = m_Dialog.FindAction("Down", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // General
    private readonly InputActionMap m_General;
    private List<IGeneralActions> m_GeneralActionsCallbackInterfaces = new List<IGeneralActions>();
    public struct GeneralActions
    {
        private @Controls m_Wrapper;
        public GeneralActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void AddCallbacks(IGeneralActions instance)
        {
            if (instance == null || m_Wrapper.m_GeneralActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GeneralActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IGeneralActions instance)
        {
        }

        public void RemoveCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGeneralActions instance)
        {
            foreach (var item in m_Wrapper.m_GeneralActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GeneralActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GeneralActions @General => new GeneralActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Camera;
    private readonly InputAction m_Player_LockOnTargertLeft;
    private readonly InputAction m_Player_LockonTargertRight;
    private readonly InputAction m_Player_Roll;
    private readonly InputAction m_Player_lockOnInput;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_CheatMode;
    private readonly InputAction m_Player_Pause;
    private readonly InputAction m_Player_Itens;
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_Arm;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Camera => m_Wrapper.m_Player_Camera;
        public InputAction @LockOnTargertLeft => m_Wrapper.m_Player_LockOnTargertLeft;
        public InputAction @LockonTargertRight => m_Wrapper.m_Player_LockonTargertRight;
        public InputAction @Roll => m_Wrapper.m_Player_Roll;
        public InputAction @lockOnInput => m_Wrapper.m_Player_lockOnInput;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @CheatMode => m_Wrapper.m_Player_CheatMode;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputAction @Itens => m_Wrapper.m_Player_Itens;
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @Arm => m_Wrapper.m_Player_Arm;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
            @LockOnTargertLeft.started += instance.OnLockOnTargertLeft;
            @LockOnTargertLeft.performed += instance.OnLockOnTargertLeft;
            @LockOnTargertLeft.canceled += instance.OnLockOnTargertLeft;
            @LockonTargertRight.started += instance.OnLockonTargertRight;
            @LockonTargertRight.performed += instance.OnLockonTargertRight;
            @LockonTargertRight.canceled += instance.OnLockonTargertRight;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @lockOnInput.started += instance.OnLockOnInput;
            @lockOnInput.performed += instance.OnLockOnInput;
            @lockOnInput.canceled += instance.OnLockOnInput;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @CheatMode.started += instance.OnCheatMode;
            @CheatMode.performed += instance.OnCheatMode;
            @CheatMode.canceled += instance.OnCheatMode;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Itens.started += instance.OnItens;
            @Itens.performed += instance.OnItens;
            @Itens.canceled += instance.OnItens;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Arm.started += instance.OnArm;
            @Arm.performed += instance.OnArm;
            @Arm.canceled += instance.OnArm;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
            @LockOnTargertLeft.started -= instance.OnLockOnTargertLeft;
            @LockOnTargertLeft.performed -= instance.OnLockOnTargertLeft;
            @LockOnTargertLeft.canceled -= instance.OnLockOnTargertLeft;
            @LockonTargertRight.started -= instance.OnLockonTargertRight;
            @LockonTargertRight.performed -= instance.OnLockonTargertRight;
            @LockonTargertRight.canceled -= instance.OnLockonTargertRight;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @lockOnInput.started -= instance.OnLockOnInput;
            @lockOnInput.performed -= instance.OnLockOnInput;
            @lockOnInput.canceled -= instance.OnLockOnInput;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @CheatMode.started -= instance.OnCheatMode;
            @CheatMode.performed -= instance.OnCheatMode;
            @CheatMode.canceled -= instance.OnCheatMode;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Itens.started -= instance.OnItens;
            @Itens.performed -= instance.OnItens;
            @Itens.canceled -= instance.OnItens;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Arm.started -= instance.OnArm;
            @Arm.performed -= instance.OnArm;
            @Arm.canceled -= instance.OnArm;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Interact;
    private readonly InputAction m_UI_Exit;
    public struct UIActions
    {
        private @Controls m_Wrapper;
        public UIActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_UI_Interact;
        public InputAction @Exit => m_Wrapper.m_UI_Exit;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Loja
    private readonly InputActionMap m_Loja;
    private List<ILojaActions> m_LojaActionsCallbackInterfaces = new List<ILojaActions>();
    private readonly InputAction m_Loja_Sair;
    private readonly InputAction m_Loja_CheatMode;
    private readonly InputAction m_Loja_Pause;
    private readonly InputAction m_Loja_Itens;
    public struct LojaActions
    {
        private @Controls m_Wrapper;
        public LojaActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Sair => m_Wrapper.m_Loja_Sair;
        public InputAction @CheatMode => m_Wrapper.m_Loja_CheatMode;
        public InputAction @Pause => m_Wrapper.m_Loja_Pause;
        public InputAction @Itens => m_Wrapper.m_Loja_Itens;
        public InputActionMap Get() { return m_Wrapper.m_Loja; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LojaActions set) { return set.Get(); }
        public void AddCallbacks(ILojaActions instance)
        {
            if (instance == null || m_Wrapper.m_LojaActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LojaActionsCallbackInterfaces.Add(instance);
            @Sair.started += instance.OnSair;
            @Sair.performed += instance.OnSair;
            @Sair.canceled += instance.OnSair;
            @CheatMode.started += instance.OnCheatMode;
            @CheatMode.performed += instance.OnCheatMode;
            @CheatMode.canceled += instance.OnCheatMode;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Itens.started += instance.OnItens;
            @Itens.performed += instance.OnItens;
            @Itens.canceled += instance.OnItens;
        }

        private void UnregisterCallbacks(ILojaActions instance)
        {
            @Sair.started -= instance.OnSair;
            @Sair.performed -= instance.OnSair;
            @Sair.canceled -= instance.OnSair;
            @CheatMode.started -= instance.OnCheatMode;
            @CheatMode.performed -= instance.OnCheatMode;
            @CheatMode.canceled -= instance.OnCheatMode;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Itens.started -= instance.OnItens;
            @Itens.performed -= instance.OnItens;
            @Itens.canceled -= instance.OnItens;
        }

        public void RemoveCallbacks(ILojaActions instance)
        {
            if (m_Wrapper.m_LojaActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILojaActions instance)
        {
            foreach (var item in m_Wrapper.m_LojaActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LojaActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LojaActions @Loja => new LojaActions(this);

    // Cheat
    private readonly InputActionMap m_Cheat;
    private List<ICheatActions> m_CheatActionsCallbackInterfaces = new List<ICheatActions>();
    private readonly InputAction m_Cheat_Exit;
    public struct CheatActions
    {
        private @Controls m_Wrapper;
        public CheatActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Exit => m_Wrapper.m_Cheat_Exit;
        public InputActionMap Get() { return m_Wrapper.m_Cheat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CheatActions set) { return set.Get(); }
        public void AddCallbacks(ICheatActions instance)
        {
            if (instance == null || m_Wrapper.m_CheatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CheatActionsCallbackInterfaces.Add(instance);
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(ICheatActions instance)
        {
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(ICheatActions instance)
        {
            if (m_Wrapper.m_CheatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICheatActions instance)
        {
            foreach (var item in m_Wrapper.m_CheatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CheatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CheatActions @Cheat => new CheatActions(this);

    // Dialog
    private readonly InputActionMap m_Dialog;
    private List<IDialogActions> m_DialogActionsCallbackInterfaces = new List<IDialogActions>();
    private readonly InputAction m_Dialog_Itens;
    private readonly InputAction m_Dialog_Pause;
    private readonly InputAction m_Dialog_Interact;
    private readonly InputAction m_Dialog_Up;
    private readonly InputAction m_Dialog_Down;
    public struct DialogActions
    {
        private @Controls m_Wrapper;
        public DialogActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Itens => m_Wrapper.m_Dialog_Itens;
        public InputAction @Pause => m_Wrapper.m_Dialog_Pause;
        public InputAction @Interact => m_Wrapper.m_Dialog_Interact;
        public InputAction @Up => m_Wrapper.m_Dialog_Up;
        public InputAction @Down => m_Wrapper.m_Dialog_Down;
        public InputActionMap Get() { return m_Wrapper.m_Dialog; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogActions set) { return set.Get(); }
        public void AddCallbacks(IDialogActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogActionsCallbackInterfaces.Add(instance);
            @Itens.started += instance.OnItens;
            @Itens.performed += instance.OnItens;
            @Itens.canceled += instance.OnItens;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
        }

        private void UnregisterCallbacks(IDialogActions instance)
        {
            @Itens.started -= instance.OnItens;
            @Itens.performed -= instance.OnItens;
            @Itens.canceled -= instance.OnItens;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
        }

        public void RemoveCallbacks(IDialogActions instance)
        {
            if (m_Wrapper.m_DialogActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogActions @Dialog => new DialogActions(this);
    public interface IGeneralActions
    {
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnLockOnTargertLeft(InputAction.CallbackContext context);
        void OnLockonTargertRight(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnLockOnInput(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnCheatMode(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnItens(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnArm(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
    public interface ILojaActions
    {
        void OnSair(InputAction.CallbackContext context);
        void OnCheatMode(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnItens(InputAction.CallbackContext context);
    }
    public interface ICheatActions
    {
        void OnExit(InputAction.CallbackContext context);
    }
    public interface IDialogActions
    {
        void OnItens(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
}
